#!/usr/bin/env node

var program = require('commander'),
    CLI = require('../lib/cli');

program.version('0.0.10');

program
  .command('backlog')
  .description('Show the product backlog')
  .option('-a, --all', 'Show all stories (instead of just the top 20)')
  .option('-t, --tag [tag]', 'Show stories tagged with [tag]')
  .option('-p, --project [project]', 'Show backlog stories for project [project]')
  .action(function (opts) { new CLI().backlog(opts) });

program
  .command('sprint')
  .description('Show the current team iteration')
  .option('-t, --tasks', 'Show story tasks')
  .option('-a, --accepted', 'Show accepted stories')
  .option('-p, --project [project]', 'Show sprint stories for project [project]')
  .action(function (opts) { new CLI().sprint(opts) });

program
  .command('show <story>')
  .description('Show tasks for an individual story')
  .action(function (story) { new CLI().show(story) });

program
  .command('open <story>')
  .description('Open a story in a web browser')
  .action(function (story) { new CLI().open(story) });

program
  .command('start <task>')
  .description('Set a task state to in-progress and assign it to you')
  .action(function (task) { new CLI().start(task) });

program
  .command('finish <task>')
  .description('Set a task state to completed and assign it to you')
  .action(function (task) { new CLI().finish(task) });

program
  .command('abandon <task>')
  .description('Set a task state to defined and clear the owner')
  .action(function (task) { new CLI().abandon(task) });

program
  .command('block <task>')
  .description('Set a task state to blocked')
  .action(function (task) { new CLI().block(task) });

program
  .command('unblock <task>')
  .description('Set a task state to unblocked')
  .action(function (task) { new CLI().unblock(task) });

program
  .command('current')
  .description('Show your current tasks and stories')
  .action(function () { new CLI().current() });

program
  .command('point <story> <points>')
  .description('Set the points for a story')
  .action(function (story, points) { new CLI().point(story, parseInt(points, 10)) });

program
  .command('task <option> <target>')
  .description('Allow you to create and delete story tasks.\n' + 
      'Available options <option> [create|delete].\n' + 
      'In case of <option> create, <target> is the story name.\n' +
      'In case of <option> delete, <target> is the task itself.')
  .option('-n, --name [name]', 'Name [name] of the task')
  .option('-p, --project [project]', 'Create/delete a task from a specific project [project]')
  .action(function (opts, option, target) { new CLI().task(opts, option, target) });


program.on('--help', function(){
  console.log('  Usage examples of the task command to create and delete story tasks:');
  console.log('');
  console.log('    $ ralio task create US1234 -n "name of the task"');
  console.log('    $ ralio task delete TA54322');
  console.log('');
});

program.parse(process.argv);

/* vim:set filetype=javascript: */